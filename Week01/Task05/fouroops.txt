1. Encapsulation
Encapsulation hides internal data and provides access via public methods. It protects the objectâ€™s integrity by preventing outside code from directly modifying its fields.

Example:
public class Car {
    private int speed;  
    public void setSpeed(int speed) {
        if (speed > 0) {
            this.speed = speed;
        }
    }

    public int getSpeed() {
        return speed;
    }
}

class Main {
    public static void main(String[] args) {
        Car car = new Car();
        car.setSpeed(80);
        System.out.println(car.getSpeed()); 
    }
}
2. Abstraction
Abstraction is the process of hiding the implementation details and showing only the functionality to the user. In Java, this is done using abstract classes or interfaces.

Example:
abstract class Animal {
    abstract void makeSound(); 
class Dog extends Animal {
    public void makeSound() {
        System.out.println("Bark");
    }
}
}
class Cat extends Animal {
    public void makeSound() {
        System.out.println("Meow");
    }
}

class Main {
    public static void main(String[] args) {
        Animal a = new Dog();
        a.makeSound();  
    }
}
3. Inheritance
Inheritance allows one class to inherit properties and methods from another, promoting code reuse.

Example:

class Vehicle {
    void start() {
        System.out.println("Vehicle started");
    }
}

class Car extends Vehicle {
    void drive() {
        System.out.println("Car is driving");
    }
}

class Main {
    public static void main(String[] args) {
        Car car = new Car();
        car.start();  
        car.drive(); 
    }
}
4. Polymorphism
Polymorphism lets one interface be used for different underlying forms (e.g., multiple classes implementing the same method).

Example:
class Bird {
    void makeSound() {
        System.out.println("Some bird sound");
    }
}

class Sparrow extends Bird {
    void makeSound() {
        System.out.println("Chirp");
    }
}

class Owl extends Bird {
    void makeSound() {
        System.out.println("Hoot");
    }
}

class Main {
    public static void playSound(Bird bird) {
        bird.makeSound();    
  }

    public static void main(String[] args) {
        playSound(new Sparrow());  
       playSound(new Owl());      
    }
}