Method Overloading
Occurs within the same class.

Same method name, but different parameter lists (number, type, or order of parameters).

Implemented through compile-time polymorphism (also known as static polymorphism).

Not supported in Python in the traditional way, but can be mimicked using default parameters or variable arguments.

Example in Java (which natively supports overloading):
class Calculator {
    int add(int a, int b) {
        return a + b;
    }

    double add(double a, double b) {
        return a + b;
    }

    int add(int a, int b, int c) {
        return a + b + c;
    }
}

public class Main {
    public static void main(String[] args) {
        Calculator calc = new Calculator();
        System.out.println(calc.add(2, 3));        // Calls int add(int, int)
        System.out.println(calc.add(2.5, 3.5));    // Calls double add(double, double)
        System.out.println(calc.add(1, 2, 3));     // Calls int add(int, int, int)
    }
}
Method Overriding
Occurs in different classes (parent-child relationship).

Subclass provides a specific implementation of a method that is already defined in its superclass.

Implemented through runtime polymorphism (dynamic method dispatch).

Method signature must be the same in both superclass and subclass.

Example in Java:
class Animal {
    void sound() {
        System.out.println("Animal makes a sound");
    }
}

class Dog extends Animal {
    @Override
    void sound() {
        System.out.println("Dog barks");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal myDog = new Dog();
        myDog.sound();  // Calls overridden method in Dog
    }
}