Encapsulation is one of the fundamental principles of object-oriented programming (OOP). It refers to the bundling of data (attributes) and the methods (functions) that operate on that data into a single unit, typically a class. It also involves restricting direct access to some of an object's components, which helps prevent accidental interference and misuse.

Improved security – Sensitive data is hidden and protected from external interference.

Modularity – Objects can be developed, tested, and maintained independently.

Ease of maintenance – Internal implementation changes do not affect external code that uses the class.

Control – Access to data is controlled through getters and setters.

Reduced complexity – By hiding unnecessary implementation details, encapsulation makes the code easier to understand.

public class BankAccount {
    private String accountNumber;
    private double balance; // Private variables

    public BankAccount(String accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposited $" + amount);
        } else {
            System.out.println("Invalid deposit amount");
        }
    }
    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println("Withdrew $" + amount);
        } else {
            System.out.println("Insufficient balance or invalid amount");
        }
    }
}
